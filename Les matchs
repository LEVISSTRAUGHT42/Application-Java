package application;

import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.ResourceBundle;

import org.hibernate.result.Output;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import com.upb.model.Matchs;
import com.upb.model.Membre;
import com.upb.model.Aritre;
import com.util.dao.IMatchDao;
import com.util.dao.IMembreDao;
import com.util.dao.MatchDao;
import com.util.dao.MembreDao;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;

public class RencontresController  implements Initializable{

    @FXML
    private TextField Terrain;
    
    @FXML
    private TextField Arbitre;
    
    @FXML
    private Button goArbitre;

    @FXML
    private Button goParticip;

    @FXML
    private Button goTerrain;
    

    @FXML
    private TextField Participant;
    
    @FXML
    private TextField Duree;
    
    @FXML
    private TextField Date;

    @FXML
    private TextField HeureD;

    @FXML
    private TextField HeureF;

    @FXML
    private TableColumn<?, ?> Participants;

    @FXML
    private TableColumn<?, ?> arbitre;
    
    @FXML
    private Button ajouter;

    @FXML
    private Button creer;

    @FXML
    private TableColumn<?, ?> date;

    @FXML
    private TableColumn<?, ?> duree;

    @FXML
    private TableColumn<?, ?> heureD;

    @FXML
    private TableColumn<?, ?> heureF;

    @FXML
    private TableColumn<?, ?> id_match;
    
    @FXML
    private TableColumn<?, ?> terrain;

    @FXML
    private Button modifier;

    @FXML
    private Button supprimer;

    @FXML
    private TableView<Matchs> tableau_match;

    @FXML
    private Pane tableau_partcipant;
    
    IMatchDao imatchDao = new MatchDao();
    IMembreDao imembreDao = new MembreDao();

    @FXML
    private List<Matchs> addMatchList;
    
    @FXML
    private List<Membre> addMembreList;
    

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		    matchShowList();
			// m.setDateMatch(Date.getText());
	}
	@FXML
	void modifier(ActionEvent e) {
		modifier();	}
	
	public void AjouterRen() {
		
		
		if(Date.getText().isEmpty() || HeureD.getText().isEmpty() || HeureF.getText().isEmpty() || Duree.getText().isEmpty() || Participant.getText().isEmpty() || Arbitre.getText().isEmpty() || Terrain.getText().isEmpty()) {
		 Alert alert;
		 alert = new Alert(AlertType.ERROR);
   		 alert.setTitle("Error Message");
   		 alert.setHeaderText(null);
   		 alert.setContentText("Remplissez les champs svp");
   		 alert.showAndWait();
		}
		
		IMatchDao imatchDao = new MatchDao();
		
		Matchs match = new Matchs();
        
 
 		match.setDateMatch(Date.getText());
 		match.setHeureDebut(HeureD.getText());
 		match.setHeureFin(HeureF.getText());
 		match.setDuree(Duree.getText());
 		match.setParticipant(Participant.getText());
 		match.setArbitre(Arbitre.getText());
 		match.setTerrain(Terrain.getText());
 		if(match.getDateMatch().equals(Date.getText()) && match.getParticipant().equals(Participant.getText()) && match.getArbitre().equals(Arbitre.getText()) ) {
 			Alert alert;
 			 alert = new Alert(AlertType.ERROR);
 	   		 alert.setTitle("Error Message");
 	   		 alert.setHeaderText(null);
 	   		 alert.setContentText("LES CHAMPS SONT IDENTIQUES, IMPOSSIBLE D'AJOUTER");
 	   		 alert.showAndWait();
 		} else {
 		imatchDao.saveMatchs(match);
 		}
 		
	}
	public void modifier() {
		IMatchDao imatchDao = new MatchDao();
		int selectID = tableau_match.getSelectionModel().getSelectedIndex();
      	 Alert alert;
      	/* if(Date.getText().isEmpty() || HeureD.getText().isEmpty() || HeureF.getText().isEmpty() || Duree.getText().isEmpty() || Arbitre.getText().isEmpty() || Terrain.getText().isEmpty()) {
      		 alert = new Alert(AlertType.ERROR);
      		 alert.setTitle("Error Message");
      		 alert.setHeaderText(null);	
      		 alert.setContentText("Remplissez les champs svp");
      		 alert.showAndWait();
      	 }else {*/
      	 if(selectID<=-1){
      		alert = new Alert(AlertType.ERROR);
	   		 alert.setTitle("Error Message");
	   		 alert.setHeaderText(null);
	   		 alert.setContentText("AUCUNE LIGNE SELECTIONNE");
	   		 alert.showAndWait();
      	 }
      		 alert = new Alert(AlertType.CONFIRMATION);
      		 alert.setTitle("CONFIRMATION MESSAGE");
      		 alert.setHeaderText(null);
      		 alert.setContentText("voulez vous vraiment changer les informations a la date:"+Date.getText()+" ?");
      		 Optional<ButtonType> option = alert.showAndWait();
      		 if(option.get().equals(ButtonType.OK)) {
      			 for(Matchs m : imatchDao.getAllMatchs()) {
      				 if(m.getIdMatch() == selectID) {
      					 
      					 Date.setText(date.getCellData(selectID).toString());
      					HeureD.setText(heureD.getCellData(selectID).toString());
      					HeureF.setText(heureF.getCellData(selectID).toString());
      					Duree.setText(duree.getCellData(selectID).toString());
      					Participant.setText(Participants.getCellData(selectID).toString());
      					Arbitre.setText(arbitre.getCellData(selectID).toString());
      					Terrain.setText(terrain.getCellData(selectID).toString());
      					/* m.setDateMatch(Date.getText());
      					 m.setHeureDebut(HeureD.getText());
      					 m.setHeureFin(HeureF.getText());
      					 m.setDuree(Duree.getText());
      					 m.setParticipant(participant.getText());
      					 m.setArbitre(Arbitre.getText());
      					 m.setTerrain(Terrain.getText());
      					 
      					*/imatchDao.updateMembre(m);
      					 
      					 
      				 }
      			 }
      		 }
      		 alert = new Alert(AlertType.INFORMATION);
      		 alert.setTitle("Modifié avec succès");
      		 alert.setHeaderText(null);
      		 alert.setHeaderText(" enregistrer avec success");
      		 alert.showAndWait();
      		 
      	 }
	public void supprimer() {
		IMatchDao imatchDao = new MatchDao();
		int selectedID = tableau_match.getSelectionModel().getSelectedIndex();
     	Alert alert;
     		/*if(selectedID) {
     		 alert = new Alert(AlertType.ERROR);
     		 alert.setTitle("Error Message");
     		 alert.setHeaderText(null);	
     		 alert.setContentText("entrez la date de la rencontre a supprimer svp");
     		 alert.showAndWait();
     	 }else {*/
     	if(selectedID<=-1){
			 alert = new Alert(AlertType.ERROR);
	   		 alert.setTitle("Error Message");
	   		 alert.setHeaderText(null);
	   		 alert.setContentText("AUCUNE LIGNE SELECTIONNE");
	   		 alert.showAndWait();
     	 }

     			 for(Matchs m : imatchDao.getAllMatchs()) {
     				 if(m.getIdMatch() == selectedID) {
     					/* m.setDateMatch(Date.getText());
     					 m.setHeureDebut(HeureD.getText());
     					 m.setHeureFin(HeureF.getText());
     					 m.setDuree(Duree.getText());
     					 m.setParticipant(participant.getText());
     					 m.setArbitre(Arbitre.getText());
     					 m.setTerrain(Terrain.getText());*/
     					 
     					imatchDao.deleteMatchs(selectedID);
     	     			alert = new Alert(AlertType.INFORMATION);
     	         		 alert.setTitle("SUPRIMER AVEC SUCCES");
     	         		 alert.setHeaderText(null);
     	         		 alert.setHeaderText(" Vous avez  supprimer avec succès");
     	         		 alert.showAndWait();
     				 }
     			 }	 
     		 }
     //	 }
	  public void matchShowList() {
		 
	    	  addMatchList = imatchDao.getAllMatchs();
	    	  addMembreList = imembreDao.getAllMembres();
	    	 Matchs match = new Matchs();
	    	 Membre membre = new Membre();
	    	 Aritre Arbitre = new Aritre();
	    	 
	    	 
	    	 
	    	 id_match.setCellValueFactory(new PropertyValueFactory<>("idMatch"));
	    	 date.setCellValueFactory(new PropertyValueFactory<>("dateMatch"));
	    	 heureD.setCellValueFactory(new PropertyValueFactory<>("heureDebut"));
	    	 heureF.setCellValueFactory(new PropertyValueFactory<>("heureFin"));
	    	 duree.setCellValueFactory(new PropertyValueFactory<>("duree"));
	    	 Participants.setCellValueFactory(new PropertyValueFactory<>("Participant"));
	    	 arbitre.setCellValueFactory(new PropertyValueFactory<>("arbitre"));
	    	 terrain.setCellValueFactory(new PropertyValueFactory<>("terrain"));
	    	
	    	 
	    	 tableau_match.getItems().addAll(addMatchList);

	     }
	  public String randomParticipants() {
		  String chaine = "";
		  Random rand = new Random();
		  addMembreList = imembreDao.getAllMembres();

		    int numberOfElements = 2;
          
		      for (int i = 0; i < numberOfElements; i++) {
		    	  int randomIndex = rand.nextInt(addMembreList.size());
			        Membre randomElement =  addMembreList.get(randomIndex);
			        addMembreList.remove(randomIndex);
			        chaine = randomElement.getNomMembre();
		      }
		       
		        /*if(e.getIdMembre().equals(randomIndex)) {
		        	
		        }else {
		        	System.out.println("Aucun");
		        }
		      }*/
		    
           
		return chaine;
		
		  }

	  public void randomArbitre() {
		  
	  }
	  public void randomTerrain() {
		  
	  }
   
}
